[project]
name = "python-gmail"
version = "0.2.1"
description = "Send email via Gmail SMTP with Python"
authors = [
    {name = "whatwant", email = "whatwant@whatwant.com"}
]
readme = "README.md"
license = {text = "BEER-WARE"}
requires-python = ">=3.8"
dependencies = [
    "python-dotenv>=1.0.0",
    "requests>=2.32.4",
]

[dependency-groups]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
]

# === 코딩 스타일 설정 (Ruff 기반) ===

[tool.ruff]
# 현재 코드 기준 설정
line-length = 88
target-version = "py38"

# 프로젝트 파일만 검사
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".env",
    "env",
    "*.egg-info",
]

[tool.ruff.lint]
# 현재 코드 스타일에 맞는 규칙 선택
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "I",   # isort
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
]

# 현재 코드 스타일과 충돌하는 규칙 제외
ignore = [
    "E501",   # line-too-long (ruff formatter가 처리)
    "T201",   # print 사용 허용 (간단한 스크립트)
    "S101",   # assert 사용 허용
    "S603",   # subprocess 보안 경고 완화
    "S607",   # 부분적 실행 경로 허용
]

# 파일별 특별 규칙
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # __init__.py에서 unused import 허용

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
# 현재 코드의 네이밍 스타일 반영
classmethod-decorators = ["classmethod"]
staticmethod-decorators = ["staticmethod"]

[tool.ruff.format]
# 현재 코드 포맷팅 스타일 유지
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.isort]
# 현재 import 순서 반영
known-first-party = ["python-gmail"]
force-single-line = false
combine-as-imports = true

[tool.mypy]
# 타입 검사 설정 (현재 코드 수준에 맞게 완화)
python_version = "3.9"
warn_return_any = false  # 현재 코드가 타입 힌트 없음
warn_unused_configs = true
disallow_untyped_defs = false  # 점진적 적용
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "dotenv.*",
    "email.mime.*",
]
ignore_missing_imports = true
